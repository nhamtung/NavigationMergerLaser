// Generated by gencpp from file sick_lidar_localization/SickLocResultPortHeaderMsg.msg
// DO NOT EDIT!


#ifndef SICK_LIDAR_LOCALIZATION_MESSAGE_SICKLOCRESULTPORTHEADERMSG_H
#define SICK_LIDAR_LOCALIZATION_MESSAGE_SICKLOCRESULTPORTHEADERMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sick_lidar_localization
{
template <class ContainerAllocator>
struct SickLocResultPortHeaderMsg_
{
  typedef SickLocResultPortHeaderMsg_<ContainerAllocator> Type;

  SickLocResultPortHeaderMsg_()
    : MagicWord(0)
    , Length(0)
    , PayloadType(0)
    , PayloadVersion(0)
    , OrderNumber(0)
    , SerialNumber(0)
    , FW_Version()
    , TelegramCounter(0)
    , SystemTime(0)  {
    }
  SickLocResultPortHeaderMsg_(const ContainerAllocator& _alloc)
    : MagicWord(0)
    , Length(0)
    , PayloadType(0)
    , PayloadVersion(0)
    , OrderNumber(0)
    , SerialNumber(0)
    , FW_Version(_alloc)
    , TelegramCounter(0)
    , SystemTime(0)  {
  (void)_alloc;
    }



   typedef uint32_t _MagicWord_type;
  _MagicWord_type MagicWord;

   typedef uint32_t _Length_type;
  _Length_type Length;

   typedef uint16_t _PayloadType_type;
  _PayloadType_type PayloadType;

   typedef uint16_t _PayloadVersion_type;
  _PayloadVersion_type PayloadVersion;

   typedef uint32_t _OrderNumber_type;
  _OrderNumber_type OrderNumber;

   typedef uint32_t _SerialNumber_type;
  _SerialNumber_type SerialNumber;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _FW_Version_type;
  _FW_Version_type FW_Version;

   typedef uint32_t _TelegramCounter_type;
  _TelegramCounter_type TelegramCounter;

   typedef uint64_t _SystemTime_type;
  _SystemTime_type SystemTime;





  typedef boost::shared_ptr< ::sick_lidar_localization::SickLocResultPortHeaderMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sick_lidar_localization::SickLocResultPortHeaderMsg_<ContainerAllocator> const> ConstPtr;

}; // struct SickLocResultPortHeaderMsg_

typedef ::sick_lidar_localization::SickLocResultPortHeaderMsg_<std::allocator<void> > SickLocResultPortHeaderMsg;

typedef boost::shared_ptr< ::sick_lidar_localization::SickLocResultPortHeaderMsg > SickLocResultPortHeaderMsgPtr;
typedef boost::shared_ptr< ::sick_lidar_localization::SickLocResultPortHeaderMsg const> SickLocResultPortHeaderMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sick_lidar_localization::SickLocResultPortHeaderMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sick_lidar_localization::SickLocResultPortHeaderMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sick_lidar_localization::SickLocResultPortHeaderMsg_<ContainerAllocator1> & lhs, const ::sick_lidar_localization::SickLocResultPortHeaderMsg_<ContainerAllocator2> & rhs)
{
  return lhs.MagicWord == rhs.MagicWord &&
    lhs.Length == rhs.Length &&
    lhs.PayloadType == rhs.PayloadType &&
    lhs.PayloadVersion == rhs.PayloadVersion &&
    lhs.OrderNumber == rhs.OrderNumber &&
    lhs.SerialNumber == rhs.SerialNumber &&
    lhs.FW_Version == rhs.FW_Version &&
    lhs.TelegramCounter == rhs.TelegramCounter &&
    lhs.SystemTime == rhs.SystemTime;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sick_lidar_localization::SickLocResultPortHeaderMsg_<ContainerAllocator1> & lhs, const ::sick_lidar_localization::SickLocResultPortHeaderMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sick_lidar_localization

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::sick_lidar_localization::SickLocResultPortHeaderMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sick_lidar_localization::SickLocResultPortHeaderMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sick_lidar_localization::SickLocResultPortHeaderMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sick_lidar_localization::SickLocResultPortHeaderMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sick_lidar_localization::SickLocResultPortHeaderMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sick_lidar_localization::SickLocResultPortHeaderMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sick_lidar_localization::SickLocResultPortHeaderMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2faf4992147f30886f5a055c14ae68b9";
  }

  static const char* value(const ::sick_lidar_localization::SickLocResultPortHeaderMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2faf4992147f3088ULL;
  static const uint64_t static_value2 = 0x6f5a055c14ae68b9ULL;
};

template<class ContainerAllocator>
struct DataType< ::sick_lidar_localization::SickLocResultPortHeaderMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sick_lidar_localization/SickLocResultPortHeaderMsg";
  }

  static const char* value(const ::sick_lidar_localization::SickLocResultPortHeaderMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sick_lidar_localization::SickLocResultPortHeaderMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Definition of ros message SickLocResultPortHeaderMsg.\n"
"# SickLocResultPortHeaderMsg publishes the header of a result port telegram\n"
"# for sick localization (52 byte). See chapter 5.9 (\"About result port telegrams\")\n"
"# of the operation manual for further details.\n"
"\n"
"uint32  MagicWord        # Magic word SICK (0x53 0x49 0x43 0x4B). Size: 4 × UInt8 = 4 byte\n"
"uint32  Length           # Length of telegram incl. header, payload, and trailer. Size: UInt32 = 4 byte\n"
"uint16  PayloadType      # Payload type: 0x06c2 = Little Endian, 0x0642 = Big Endian. Size: UInt16 = 2 byte\n"
"uint16  PayloadVersion   # Version of PayloadType structure. Size: UInt16 = 2 byte\n"
"uint32  OrderNumber      # Order number of the localization controller. Size: UInt32 = 4 byte\n"
"uint32  SerialNumber     # Serial number of the localization controller. Size: UInt32 = 4 byte\n"
"uint8[] FW_Version       # Software version of the localization controller. Size: 20 × UInt8 = 20 byte\n"
"uint32  TelegramCounter  # Telegram counter since last start-up. Size: UInt32 = 4 byte\n"
"uint64  SystemTime       # Not used. Size: NTP = 8 byte\n"
"\n"
;
  }

  static const char* value(const ::sick_lidar_localization::SickLocResultPortHeaderMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sick_lidar_localization::SickLocResultPortHeaderMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.MagicWord);
      stream.next(m.Length);
      stream.next(m.PayloadType);
      stream.next(m.PayloadVersion);
      stream.next(m.OrderNumber);
      stream.next(m.SerialNumber);
      stream.next(m.FW_Version);
      stream.next(m.TelegramCounter);
      stream.next(m.SystemTime);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SickLocResultPortHeaderMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sick_lidar_localization::SickLocResultPortHeaderMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sick_lidar_localization::SickLocResultPortHeaderMsg_<ContainerAllocator>& v)
  {
    s << indent << "MagicWord: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.MagicWord);
    s << indent << "Length: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.Length);
    s << indent << "PayloadType: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.PayloadType);
    s << indent << "PayloadVersion: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.PayloadVersion);
    s << indent << "OrderNumber: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.OrderNumber);
    s << indent << "SerialNumber: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.SerialNumber);
    s << indent << "FW_Version[]" << std::endl;
    for (size_t i = 0; i < v.FW_Version.size(); ++i)
    {
      s << indent << "  FW_Version[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.FW_Version[i]);
    }
    s << indent << "TelegramCounter: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.TelegramCounter);
    s << indent << "SystemTime: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.SystemTime);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SICK_LIDAR_LOCALIZATION_MESSAGE_SICKLOCRESULTPORTHEADERMSG_H
