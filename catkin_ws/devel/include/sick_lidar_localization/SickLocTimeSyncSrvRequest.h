// Generated by gencpp from file sick_lidar_localization/SickLocTimeSyncSrvRequest.msg
// DO NOT EDIT!


#ifndef SICK_LIDAR_LOCALIZATION_MESSAGE_SICKLOCTIMESYNCSRVREQUEST_H
#define SICK_LIDAR_LOCALIZATION_MESSAGE_SICKLOCTIMESYNCSRVREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sick_lidar_localization
{
template <class ContainerAllocator>
struct SickLocTimeSyncSrvRequest_
{
  typedef SickLocTimeSyncSrvRequest_<ContainerAllocator> Type;

  SickLocTimeSyncSrvRequest_()
    : timestamp_lidar_ms(0)  {
    }
  SickLocTimeSyncSrvRequest_(const ContainerAllocator& _alloc)
    : timestamp_lidar_ms(0)  {
  (void)_alloc;
    }



   typedef uint32_t _timestamp_lidar_ms_type;
  _timestamp_lidar_ms_type timestamp_lidar_ms;





  typedef boost::shared_ptr< ::sick_lidar_localization::SickLocTimeSyncSrvRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sick_lidar_localization::SickLocTimeSyncSrvRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SickLocTimeSyncSrvRequest_

typedef ::sick_lidar_localization::SickLocTimeSyncSrvRequest_<std::allocator<void> > SickLocTimeSyncSrvRequest;

typedef boost::shared_ptr< ::sick_lidar_localization::SickLocTimeSyncSrvRequest > SickLocTimeSyncSrvRequestPtr;
typedef boost::shared_ptr< ::sick_lidar_localization::SickLocTimeSyncSrvRequest const> SickLocTimeSyncSrvRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sick_lidar_localization::SickLocTimeSyncSrvRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sick_lidar_localization::SickLocTimeSyncSrvRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sick_lidar_localization::SickLocTimeSyncSrvRequest_<ContainerAllocator1> & lhs, const ::sick_lidar_localization::SickLocTimeSyncSrvRequest_<ContainerAllocator2> & rhs)
{
  return lhs.timestamp_lidar_ms == rhs.timestamp_lidar_ms;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sick_lidar_localization::SickLocTimeSyncSrvRequest_<ContainerAllocator1> & lhs, const ::sick_lidar_localization::SickLocTimeSyncSrvRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sick_lidar_localization

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::sick_lidar_localization::SickLocTimeSyncSrvRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sick_lidar_localization::SickLocTimeSyncSrvRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sick_lidar_localization::SickLocTimeSyncSrvRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sick_lidar_localization::SickLocTimeSyncSrvRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sick_lidar_localization::SickLocTimeSyncSrvRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sick_lidar_localization::SickLocTimeSyncSrvRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sick_lidar_localization::SickLocTimeSyncSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e3f76cba46368467cfda2028d43e8ed9";
  }

  static const char* value(const ::sick_lidar_localization::SickLocTimeSyncSrvRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe3f76cba46368467ULL;
  static const uint64_t static_value2 = 0xcfda2028d43e8ed9ULL;
};

template<class ContainerAllocator>
struct DataType< ::sick_lidar_localization::SickLocTimeSyncSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sick_lidar_localization/SickLocTimeSyncSrvRequest";
  }

  static const char* value(const ::sick_lidar_localization::SickLocTimeSyncSrvRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sick_lidar_localization::SickLocTimeSyncSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Definition of ROS service SickLocTimeSync for sick localization.\n"
"#\n"
"# ROS service SickLocTimeSync returns the system time of a vehicle pose from lidar ticks in ms.\n"
"# SickLocTimeSync uses a software pll to calculate the system time from ticks. Therefore at least\n"
"# 7 LocRequestTimestamp measurements are required before time sync becomes valid (default fifo\n"
"# size of the software pll is 7 measurements). Depending on time_sync_rate configured in the\n"
"# launch-file, this initial phase can take several seconds (up to 70 seconds).\n"
"\n"
"#\n"
"# Request (input): Timestamp in ticks\n"
"#\n"
"\n"
"uint32 timestamp_lidar_ms  # Lidar timestamp in milliseconds from LocRequestTimestamp response\n"
"\n"
;
  }

  static const char* value(const ::sick_lidar_localization::SickLocTimeSyncSrvRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sick_lidar_localization::SickLocTimeSyncSrvRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timestamp_lidar_ms);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SickLocTimeSyncSrvRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sick_lidar_localization::SickLocTimeSyncSrvRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sick_lidar_localization::SickLocTimeSyncSrvRequest_<ContainerAllocator>& v)
  {
    s << indent << "timestamp_lidar_ms: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.timestamp_lidar_ms);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SICK_LIDAR_LOCALIZATION_MESSAGE_SICKLOCTIMESYNCSRVREQUEST_H
