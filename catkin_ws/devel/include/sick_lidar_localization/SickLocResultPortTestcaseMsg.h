// Generated by gencpp from file sick_lidar_localization/SickLocResultPortTestcaseMsg.msg
// DO NOT EDIT!


#ifndef SICK_LIDAR_LOCALIZATION_MESSAGE_SICKLOCRESULTPORTTESTCASEMSG_H
#define SICK_LIDAR_LOCALIZATION_MESSAGE_SICKLOCRESULTPORTTESTCASEMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <sick_lidar_localization/SickLocResultPortTelegramMsg.h>

namespace sick_lidar_localization
{
template <class ContainerAllocator>
struct SickLocResultPortTestcaseMsg_
{
  typedef SickLocResultPortTestcaseMsg_<ContainerAllocator> Type;

  SickLocResultPortTestcaseMsg_()
    : header()
    , binary_data()
    , telegram_msg()  {
    }
  SickLocResultPortTestcaseMsg_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , binary_data(_alloc)
    , telegram_msg(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _binary_data_type;
  _binary_data_type binary_data;

   typedef  ::sick_lidar_localization::SickLocResultPortTelegramMsg_<ContainerAllocator>  _telegram_msg_type;
  _telegram_msg_type telegram_msg;





  typedef boost::shared_ptr< ::sick_lidar_localization::SickLocResultPortTestcaseMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sick_lidar_localization::SickLocResultPortTestcaseMsg_<ContainerAllocator> const> ConstPtr;

}; // struct SickLocResultPortTestcaseMsg_

typedef ::sick_lidar_localization::SickLocResultPortTestcaseMsg_<std::allocator<void> > SickLocResultPortTestcaseMsg;

typedef boost::shared_ptr< ::sick_lidar_localization::SickLocResultPortTestcaseMsg > SickLocResultPortTestcaseMsgPtr;
typedef boost::shared_ptr< ::sick_lidar_localization::SickLocResultPortTestcaseMsg const> SickLocResultPortTestcaseMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sick_lidar_localization::SickLocResultPortTestcaseMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sick_lidar_localization::SickLocResultPortTestcaseMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sick_lidar_localization::SickLocResultPortTestcaseMsg_<ContainerAllocator1> & lhs, const ::sick_lidar_localization::SickLocResultPortTestcaseMsg_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.binary_data == rhs.binary_data &&
    lhs.telegram_msg == rhs.telegram_msg;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sick_lidar_localization::SickLocResultPortTestcaseMsg_<ContainerAllocator1> & lhs, const ::sick_lidar_localization::SickLocResultPortTestcaseMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sick_lidar_localization

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::sick_lidar_localization::SickLocResultPortTestcaseMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sick_lidar_localization::SickLocResultPortTestcaseMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sick_lidar_localization::SickLocResultPortTestcaseMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sick_lidar_localization::SickLocResultPortTestcaseMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sick_lidar_localization::SickLocResultPortTestcaseMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sick_lidar_localization::SickLocResultPortTestcaseMsg_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sick_lidar_localization::SickLocResultPortTestcaseMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "07de600920e51362dfacfa2cfcff3495";
  }

  static const char* value(const ::sick_lidar_localization::SickLocResultPortTestcaseMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x07de600920e51362ULL;
  static const uint64_t static_value2 = 0xdfacfa2cfcff3495ULL;
};

template<class ContainerAllocator>
struct DataType< ::sick_lidar_localization::SickLocResultPortTestcaseMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sick_lidar_localization/SickLocResultPortTestcaseMsg";
  }

  static const char* value(const ::sick_lidar_localization::SickLocResultPortTestcaseMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sick_lidar_localization::SickLocResultPortTestcaseMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Definition of ros message SickLocResultPortTestcaseMsg.\n"
"# SickLocResultPortTestcaseMsg publishes testcases for result port telegrams\n"
"# in both binary format (simulated result port telegrams from localization controller)\n"
"# and ros message format of type SickLocResultPortTelegramMsg (published by sim_loc_driver).\n"
"# See chapter 5.9 (\"About result port telegrams\") of the operation manual for further details.\n"
"\n"
"Header header                             # ROS Header with sequence id, timestamp and frame id\n"
"uint8[]                      binary_data  # binary encoded result port telegram\n"
"SickLocResultPortTelegramMsg telegram_msg # decoded result port telegram\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: sick_lidar_localization/SickLocResultPortTelegramMsg\n"
"# Definition of ros message SickLocResultPortTelegramMsg.\n"
"# SickLocResultPortTelegramMsg publishes result port telegrams\n"
"# for sick localization. See chapter 5.9 (\"About result port telegrams\")\n"
"# of the operation manual for further details.\n"
"\n"
"#\n"
"# Header\n"
"#\n"
"\n"
"Header header                                 # ROS Header with sequence id, timestamp and frame id\n"
"\n"
"#\n"
"# Result port telegram\n"
"#\n"
"\n"
"SickLocResultPortHeaderMsg   telegram_header  # 52 byte header of a result port telegram\n"
"SickLocResultPortPayloadMsg  telegram_payload # 52 byte payload of a result port telegram\n"
"SickLocResultPortCrcMsg      telegram_trailer #  2 byte CRC trailer of a result port telegram\n"
"\n"
"#\n"
"# System time of vehicles pose calculated by ros service \"SickLocTimeSync\" using a software pll\n"
"#\n"
"\n"
"bool   vehicle_time_valid  # true: vehicle_time_sec and vehicle_time_nsec valid, false: software pll still in initial phase\n"
"uint32 vehicle_time_sec    # Time of vehicles pose calculated by software pll (seconds part of the system time)\n"
"uint32 vehicle_time_nsec   # Time of vehicles pose calculated by software pll (nano seconds part of the system time)\n"
"\n"
"================================================================================\n"
"MSG: sick_lidar_localization/SickLocResultPortHeaderMsg\n"
"# Definition of ros message SickLocResultPortHeaderMsg.\n"
"# SickLocResultPortHeaderMsg publishes the header of a result port telegram\n"
"# for sick localization (52 byte). See chapter 5.9 (\"About result port telegrams\")\n"
"# of the operation manual for further details.\n"
"\n"
"uint32  MagicWord        # Magic word SICK (0x53 0x49 0x43 0x4B). Size: 4 × UInt8 = 4 byte\n"
"uint32  Length           # Length of telegram incl. header, payload, and trailer. Size: UInt32 = 4 byte\n"
"uint16  PayloadType      # Payload type: 0x06c2 = Little Endian, 0x0642 = Big Endian. Size: UInt16 = 2 byte\n"
"uint16  PayloadVersion   # Version of PayloadType structure. Size: UInt16 = 2 byte\n"
"uint32  OrderNumber      # Order number of the localization controller. Size: UInt32 = 4 byte\n"
"uint32  SerialNumber     # Serial number of the localization controller. Size: UInt32 = 4 byte\n"
"uint8[] FW_Version       # Software version of the localization controller. Size: 20 × UInt8 = 20 byte\n"
"uint32  TelegramCounter  # Telegram counter since last start-up. Size: UInt32 = 4 byte\n"
"uint64  SystemTime       # Not used. Size: NTP = 8 byte\n"
"\n"
"\n"
"================================================================================\n"
"MSG: sick_lidar_localization/SickLocResultPortPayloadMsg\n"
"# Definition of ros message SickLocResultPortPayloadMsg.\n"
"# SickLocResultPortPayloadMsg publishes the payload of a result port telegram\n"
"# for sick localization (52 byte). See chapter 5.9 (\"About result port telegrams\")\n"
"# of the operation manual for further details.\n"
"\n"
"uint16 ErrorCode      # ErrorCode 0: OK, ErrorCode 1: UNKNOWNERROR. Size: UInt16 = 2 byte\n"
"uint32 ScanCounter    # Counter of related scan data. Size: UInt32 = 4 byte\n"
"uint32 Timestamp      # Time stamp of the pose [ms]. The time stamp indicates the time at which the pose is calculated. Size: UInt32 = 4 byte\n"
"int32  PoseX          # Position X of the vehicle on the map in cartesian global coordinates [mm]. Size: Int32 = 4 byte\n"
"int32  PoseY          # Position Y of the vehicle on the map in cartesian global coordinates [mm]. Size: Int32 = 4 byte\n"
"int32  PoseYaw        # Orientation (yaw) of the vehicle on the map [mdeg] Size: Int32 = 4 byte\n"
"uint32 Reserved1      # Reserved. Size: UInt32 = 4 byte\n"
"int32  Reserved2      # Reserved. Size: Int32 = 4 byte\n"
"uint8  Quality        # Quality of pose [0 … 100], 1 = bad pose quality, 100 = good pose quality. Size: UInt8 = 1 byte\n"
"uint8  OutliersRatio  # Ratio of beams that cannot be assigned to the current reference map [%]. Size: UInt8 = 1 byte\n"
"int32  CovarianceX    # Covariance c1 of the pose X [mm^2]. Size: Int32 = 4 byte\n"
"int32  CovarianceY    # Covariance c5 of the pose Y [mm^2]. Size: Int32 = 4 byte\n"
"int32  CovarianceYaw  # Covariance c9 of the pose Yaw [mdeg^2]. Size: Int32 = 4 byte\n"
"uint64 Reserved3      # Reserved. Size: UInt64 = 8 byte\n"
"\n"
"\n"
"================================================================================\n"
"MSG: sick_lidar_localization/SickLocResultPortCrcMsg\n"
"# Definition of ros message SickLocResultPortCrcMsg.\n"
"# SickLocResultPortCrcMsg publishes the CRC trailer of a result port telegram\n"
"# for sick localization (2 byte). \n"
"# Checksum details:\n"
"# * Width: 16 bits\n"
"# * Truncated polynomial: 0x1021 CRC polynomials with orders of x16 + x12 + x5 + 1 (counted without the leading '1' bit)\n"
"# * Initial value = 0xFFFF\n"
"# See chapter 5.9 (\"About result port telegrams\") of the operation manual for further details.\n"
"\n"
"uint16 Checksum # CRC16-CCITT over length of header (52 bytes) and payload (52 bytes) without 2 bytes of this trailer. Size: UInt16 = 2 byte\n"
"\n"
;
  }

  static const char* value(const ::sick_lidar_localization::SickLocResultPortTestcaseMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sick_lidar_localization::SickLocResultPortTestcaseMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.binary_data);
      stream.next(m.telegram_msg);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SickLocResultPortTestcaseMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sick_lidar_localization::SickLocResultPortTestcaseMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sick_lidar_localization::SickLocResultPortTestcaseMsg_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "binary_data[]" << std::endl;
    for (size_t i = 0; i < v.binary_data.size(); ++i)
    {
      s << indent << "  binary_data[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.binary_data[i]);
    }
    s << indent << "telegram_msg: ";
    s << std::endl;
    Printer< ::sick_lidar_localization::SickLocResultPortTelegramMsg_<ContainerAllocator> >::stream(s, indent + "  ", v.telegram_msg);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SICK_LIDAR_LOCALIZATION_MESSAGE_SICKLOCRESULTPORTTESTCASEMSG_H
