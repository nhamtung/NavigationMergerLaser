// Generated by gencpp from file sick_lidar_localization/SickLocSetPoseSrvRequest.msg
// DO NOT EDIT!


#ifndef SICK_LIDAR_LOCALIZATION_MESSAGE_SICKLOCSETPOSESRVREQUEST_H
#define SICK_LIDAR_LOCALIZATION_MESSAGE_SICKLOCSETPOSESRVREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sick_lidar_localization
{
template <class ContainerAllocator>
struct SickLocSetPoseSrvRequest_
{
  typedef SickLocSetPoseSrvRequest_<ContainerAllocator> Type;

  SickLocSetPoseSrvRequest_()
    : posex(0)
    , posey(0)
    , yaw(0)
    , uncertainty(0)  {
    }
  SickLocSetPoseSrvRequest_(const ContainerAllocator& _alloc)
    : posex(0)
    , posey(0)
    , yaw(0)
    , uncertainty(0)  {
  (void)_alloc;
    }



   typedef int32_t _posex_type;
  _posex_type posex;

   typedef int32_t _posey_type;
  _posey_type posey;

   typedef int32_t _yaw_type;
  _yaw_type yaw;

   typedef int32_t _uncertainty_type;
  _uncertainty_type uncertainty;





  typedef boost::shared_ptr< ::sick_lidar_localization::SickLocSetPoseSrvRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sick_lidar_localization::SickLocSetPoseSrvRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SickLocSetPoseSrvRequest_

typedef ::sick_lidar_localization::SickLocSetPoseSrvRequest_<std::allocator<void> > SickLocSetPoseSrvRequest;

typedef boost::shared_ptr< ::sick_lidar_localization::SickLocSetPoseSrvRequest > SickLocSetPoseSrvRequestPtr;
typedef boost::shared_ptr< ::sick_lidar_localization::SickLocSetPoseSrvRequest const> SickLocSetPoseSrvRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sick_lidar_localization::SickLocSetPoseSrvRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sick_lidar_localization::SickLocSetPoseSrvRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sick_lidar_localization::SickLocSetPoseSrvRequest_<ContainerAllocator1> & lhs, const ::sick_lidar_localization::SickLocSetPoseSrvRequest_<ContainerAllocator2> & rhs)
{
  return lhs.posex == rhs.posex &&
    lhs.posey == rhs.posey &&
    lhs.yaw == rhs.yaw &&
    lhs.uncertainty == rhs.uncertainty;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sick_lidar_localization::SickLocSetPoseSrvRequest_<ContainerAllocator1> & lhs, const ::sick_lidar_localization::SickLocSetPoseSrvRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sick_lidar_localization

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::sick_lidar_localization::SickLocSetPoseSrvRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sick_lidar_localization::SickLocSetPoseSrvRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sick_lidar_localization::SickLocSetPoseSrvRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sick_lidar_localization::SickLocSetPoseSrvRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sick_lidar_localization::SickLocSetPoseSrvRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sick_lidar_localization::SickLocSetPoseSrvRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sick_lidar_localization::SickLocSetPoseSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7d897868432ba26eb05c98367f28fc3a";
  }

  static const char* value(const ::sick_lidar_localization::SickLocSetPoseSrvRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7d897868432ba26eULL;
  static const uint64_t static_value2 = 0xb05c98367f28fc3aULL;
};

template<class ContainerAllocator>
struct DataType< ::sick_lidar_localization::SickLocSetPoseSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sick_lidar_localization/SickLocSetPoseSrvRequest";
  }

  static const char* value(const ::sick_lidar_localization::SickLocSetPoseSrvRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sick_lidar_localization::SickLocSetPoseSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Definition of ROS service SickLocSetPose for sick localization.\n"
"#\n"
"# ROS service SickLocSetPose initializes the vehicle pose\n"
"# by sending cola command (\"sMN LocSetPose <posex> <posey> <yaw> <uncertainty>\")\n"
"# with parameter\n"
"# <posex>: x coordinate in mm\n"
"# <posey>: y coordinate in mm\n"
"# <yaw>: yaw angle in millidegree, -180000 to +180000\n"
"# <uncertainty>: translation uncertainty in mm\n"
"#\n"
"# See Telegram-Listing-v1.1.0.241R.pdf for further details about \n"
"# Cola telegrams and this command.\n"
"\n"
"#\n"
"# Request (input)\n"
"#\n"
"\n"
"int32 posex       # x coordinate in mm\n"
"int32 posey       # y coordinate in mm\n"
"int32 yaw         # yaw angle in millidegree, -180000 to +180000\n"
"int32 uncertainty # translation uncertainty in mm\n"
"\n"
;
  }

  static const char* value(const ::sick_lidar_localization::SickLocSetPoseSrvRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sick_lidar_localization::SickLocSetPoseSrvRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.posex);
      stream.next(m.posey);
      stream.next(m.yaw);
      stream.next(m.uncertainty);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SickLocSetPoseSrvRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sick_lidar_localization::SickLocSetPoseSrvRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sick_lidar_localization::SickLocSetPoseSrvRequest_<ContainerAllocator>& v)
  {
    s << indent << "posex: ";
    Printer<int32_t>::stream(s, indent + "  ", v.posex);
    s << indent << "posey: ";
    Printer<int32_t>::stream(s, indent + "  ", v.posey);
    s << indent << "yaw: ";
    Printer<int32_t>::stream(s, indent + "  ", v.yaw);
    s << indent << "uncertainty: ";
    Printer<int32_t>::stream(s, indent + "  ", v.uncertainty);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SICK_LIDAR_LOCALIZATION_MESSAGE_SICKLOCSETPOSESRVREQUEST_H
