// Generated by gencpp from file sick_lidar_localization/SickLocSetResultPortSrvRequest.msg
// DO NOT EDIT!


#ifndef SICK_LIDAR_LOCALIZATION_MESSAGE_SICKLOCSETRESULTPORTSRVREQUEST_H
#define SICK_LIDAR_LOCALIZATION_MESSAGE_SICKLOCSETRESULTPORTSRVREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sick_lidar_localization
{
template <class ContainerAllocator>
struct SickLocSetResultPortSrvRequest_
{
  typedef SickLocSetResultPortSrvRequest_<ContainerAllocator> Type;

  SickLocSetResultPortSrvRequest_()
    : port(0)  {
    }
  SickLocSetResultPortSrvRequest_(const ContainerAllocator& _alloc)
    : port(0)  {
  (void)_alloc;
    }



   typedef int32_t _port_type;
  _port_type port;





  typedef boost::shared_ptr< ::sick_lidar_localization::SickLocSetResultPortSrvRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sick_lidar_localization::SickLocSetResultPortSrvRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SickLocSetResultPortSrvRequest_

typedef ::sick_lidar_localization::SickLocSetResultPortSrvRequest_<std::allocator<void> > SickLocSetResultPortSrvRequest;

typedef boost::shared_ptr< ::sick_lidar_localization::SickLocSetResultPortSrvRequest > SickLocSetResultPortSrvRequestPtr;
typedef boost::shared_ptr< ::sick_lidar_localization::SickLocSetResultPortSrvRequest const> SickLocSetResultPortSrvRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sick_lidar_localization::SickLocSetResultPortSrvRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sick_lidar_localization::SickLocSetResultPortSrvRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sick_lidar_localization::SickLocSetResultPortSrvRequest_<ContainerAllocator1> & lhs, const ::sick_lidar_localization::SickLocSetResultPortSrvRequest_<ContainerAllocator2> & rhs)
{
  return lhs.port == rhs.port;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sick_lidar_localization::SickLocSetResultPortSrvRequest_<ContainerAllocator1> & lhs, const ::sick_lidar_localization::SickLocSetResultPortSrvRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sick_lidar_localization

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::sick_lidar_localization::SickLocSetResultPortSrvRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sick_lidar_localization::SickLocSetResultPortSrvRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sick_lidar_localization::SickLocSetResultPortSrvRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sick_lidar_localization::SickLocSetResultPortSrvRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sick_lidar_localization::SickLocSetResultPortSrvRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sick_lidar_localization::SickLocSetResultPortSrvRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sick_lidar_localization::SickLocSetResultPortSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "632683733b5d3fa23d220a527594ce63";
  }

  static const char* value(const ::sick_lidar_localization::SickLocSetResultPortSrvRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x632683733b5d3fa2ULL;
  static const uint64_t static_value2 = 0x3d220a527594ce63ULL;
};

template<class ContainerAllocator>
struct DataType< ::sick_lidar_localization::SickLocSetResultPortSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sick_lidar_localization/SickLocSetResultPortSrvRequest";
  }

  static const char* value(const ::sick_lidar_localization::SickLocSetResultPortSrvRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sick_lidar_localization::SickLocSetResultPortSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Definition of ROS service SickLocSetResultPort for sick localization.\n"
"#\n"
"# ROS service SickLocSetResultPort sets the TCP-port for result output telegrams\n"
"# by sending cola command (\"sMN LocSetResultPort <port>\")\n"
"# with parameter\n"
"# <port>: TCP-port for result output telegrams (default: 2201)\n"
"#\n"
"# See Telegram-Listing-v1.1.0.241R.pdf for further details about \n"
"# Cola telegrams and this command.\n"
"\n"
"#\n"
"# Request (input)\n"
"#\n"
"\n"
"int32 port # TCP-port for result output telegrams (default: 2201)\n"
"\n"
;
  }

  static const char* value(const ::sick_lidar_localization::SickLocSetResultPortSrvRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sick_lidar_localization::SickLocSetResultPortSrvRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.port);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SickLocSetResultPortSrvRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sick_lidar_localization::SickLocSetResultPortSrvRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sick_lidar_localization::SickLocSetResultPortSrvRequest_<ContainerAllocator>& v)
  {
    s << indent << "port: ";
    Printer<int32_t>::stream(s, indent + "  ", v.port);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SICK_LIDAR_LOCALIZATION_MESSAGE_SICKLOCSETRESULTPORTSRVREQUEST_H
