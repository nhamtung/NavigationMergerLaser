// Generated by gencpp from file r2serial_driver/Num.msg
// DO NOT EDIT!


#ifndef R2SERIAL_DRIVER_MESSAGE_NUM_H
#define R2SERIAL_DRIVER_MESSAGE_NUM_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace r2serial_driver
{
template <class ContainerAllocator>
struct Num_
{
  typedef Num_<ContainerAllocator> Type;

  Num_()
    : RMID(0)
    , TMID(0)
    , ID(0)
    , PID(0)
    , DataNum(0)
    , Dta_Low(0)
    , Dta_High(0)
    , Sum(0)  {
    }
  Num_(const ContainerAllocator& _alloc)
    : RMID(0)
    , TMID(0)
    , ID(0)
    , PID(0)
    , DataNum(0)
    , Dta_Low(0)
    , Dta_High(0)
    , Sum(0)  {
  (void)_alloc;
    }



   typedef uint8_t _RMID_type;
  _RMID_type RMID;

   typedef uint8_t _TMID_type;
  _TMID_type TMID;

   typedef uint8_t _ID_type;
  _ID_type ID;

   typedef uint8_t _PID_type;
  _PID_type PID;

   typedef uint8_t _DataNum_type;
  _DataNum_type DataNum;

   typedef uint8_t _Dta_Low_type;
  _Dta_Low_type Dta_Low;

   typedef uint8_t _Dta_High_type;
  _Dta_High_type Dta_High;

   typedef uint8_t _Sum_type;
  _Sum_type Sum;





  typedef boost::shared_ptr< ::r2serial_driver::Num_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::r2serial_driver::Num_<ContainerAllocator> const> ConstPtr;

}; // struct Num_

typedef ::r2serial_driver::Num_<std::allocator<void> > Num;

typedef boost::shared_ptr< ::r2serial_driver::Num > NumPtr;
typedef boost::shared_ptr< ::r2serial_driver::Num const> NumConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::r2serial_driver::Num_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::r2serial_driver::Num_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::r2serial_driver::Num_<ContainerAllocator1> & lhs, const ::r2serial_driver::Num_<ContainerAllocator2> & rhs)
{
  return lhs.RMID == rhs.RMID &&
    lhs.TMID == rhs.TMID &&
    lhs.ID == rhs.ID &&
    lhs.PID == rhs.PID &&
    lhs.DataNum == rhs.DataNum &&
    lhs.Dta_Low == rhs.Dta_Low &&
    lhs.Dta_High == rhs.Dta_High &&
    lhs.Sum == rhs.Sum;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::r2serial_driver::Num_<ContainerAllocator1> & lhs, const ::r2serial_driver::Num_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace r2serial_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::r2serial_driver::Num_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::r2serial_driver::Num_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::r2serial_driver::Num_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::r2serial_driver::Num_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::r2serial_driver::Num_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::r2serial_driver::Num_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::r2serial_driver::Num_<ContainerAllocator> >
{
  static const char* value()
  {
    return "137910bf2ef85fa95265084c3edcdb56";
  }

  static const char* value(const ::r2serial_driver::Num_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x137910bf2ef85fa9ULL;
  static const uint64_t static_value2 = 0x5265084c3edcdb56ULL;
};

template<class ContainerAllocator>
struct DataType< ::r2serial_driver::Num_<ContainerAllocator> >
{
  static const char* value()
  {
    return "r2serial_driver/Num";
  }

  static const char* value(const ::r2serial_driver::Num_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::r2serial_driver::Num_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 RMID\n"
"uint8 TMID \n"
"uint8 ID\n"
"uint8 PID\n"
"uint8 DataNum\n"
"uint8 Dta_Low\n"
"uint8 Dta_High\n"
"uint8 Sum\n"
"\n"
"\n"
;
  }

  static const char* value(const ::r2serial_driver::Num_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::r2serial_driver::Num_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.RMID);
      stream.next(m.TMID);
      stream.next(m.ID);
      stream.next(m.PID);
      stream.next(m.DataNum);
      stream.next(m.Dta_Low);
      stream.next(m.Dta_High);
      stream.next(m.Sum);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Num_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::r2serial_driver::Num_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::r2serial_driver::Num_<ContainerAllocator>& v)
  {
    s << indent << "RMID: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.RMID);
    s << indent << "TMID: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.TMID);
    s << indent << "ID: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ID);
    s << indent << "PID: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.PID);
    s << indent << "DataNum: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.DataNum);
    s << indent << "Dta_Low: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Dta_Low);
    s << indent << "Dta_High: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Dta_High);
    s << indent << "Sum: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Sum);
  }
};

} // namespace message_operations
} // namespace ros

#endif // R2SERIAL_DRIVER_MESSAGE_NUM_H
