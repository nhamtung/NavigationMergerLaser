// Generated by gencpp from file driver_blvd_controller/speed_wheel.msg
// DO NOT EDIT!


#ifndef DRIVER_BLVD_CONTROLLER_MESSAGE_SPEED_WHEEL_H
#define DRIVER_BLVD_CONTROLLER_MESSAGE_SPEED_WHEEL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace driver_blvd_controller
{
template <class ContainerAllocator>
struct speed_wheel_
{
  typedef speed_wheel_<ContainerAllocator> Type;

  speed_wheel_()
    : wheel_letf(0)
    , wheel_right(0)  {
    }
  speed_wheel_(const ContainerAllocator& _alloc)
    : wheel_letf(0)
    , wheel_right(0)  {
  (void)_alloc;
    }



   typedef int16_t _wheel_letf_type;
  _wheel_letf_type wheel_letf;

   typedef int16_t _wheel_right_type;
  _wheel_right_type wheel_right;





  typedef boost::shared_ptr< ::driver_blvd_controller::speed_wheel_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::driver_blvd_controller::speed_wheel_<ContainerAllocator> const> ConstPtr;

}; // struct speed_wheel_

typedef ::driver_blvd_controller::speed_wheel_<std::allocator<void> > speed_wheel;

typedef boost::shared_ptr< ::driver_blvd_controller::speed_wheel > speed_wheelPtr;
typedef boost::shared_ptr< ::driver_blvd_controller::speed_wheel const> speed_wheelConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::driver_blvd_controller::speed_wheel_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::driver_blvd_controller::speed_wheel_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::driver_blvd_controller::speed_wheel_<ContainerAllocator1> & lhs, const ::driver_blvd_controller::speed_wheel_<ContainerAllocator2> & rhs)
{
  return lhs.wheel_letf == rhs.wheel_letf &&
    lhs.wheel_right == rhs.wheel_right;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::driver_blvd_controller::speed_wheel_<ContainerAllocator1> & lhs, const ::driver_blvd_controller::speed_wheel_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace driver_blvd_controller

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::driver_blvd_controller::speed_wheel_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::driver_blvd_controller::speed_wheel_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::driver_blvd_controller::speed_wheel_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::driver_blvd_controller::speed_wheel_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::driver_blvd_controller::speed_wheel_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::driver_blvd_controller::speed_wheel_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::driver_blvd_controller::speed_wheel_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fa530f9e80374edbcefccea8ede27bff";
  }

  static const char* value(const ::driver_blvd_controller::speed_wheel_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfa530f9e80374edbULL;
  static const uint64_t static_value2 = 0xcefccea8ede27bffULL;
};

template<class ContainerAllocator>
struct DataType< ::driver_blvd_controller::speed_wheel_<ContainerAllocator> >
{
  static const char* value()
  {
    return "driver_blvd_controller/speed_wheel";
  }

  static const char* value(const ::driver_blvd_controller::speed_wheel_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::driver_blvd_controller::speed_wheel_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 wheel_letf\n"
"int16 wheel_right \n"
"\n"
"\n"
;
  }

  static const char* value(const ::driver_blvd_controller::speed_wheel_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::driver_blvd_controller::speed_wheel_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.wheel_letf);
      stream.next(m.wheel_right);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct speed_wheel_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::driver_blvd_controller::speed_wheel_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::driver_blvd_controller::speed_wheel_<ContainerAllocator>& v)
  {
    s << indent << "wheel_letf: ";
    Printer<int16_t>::stream(s, indent + "  ", v.wheel_letf);
    s << indent << "wheel_right: ";
    Printer<int16_t>::stream(s, indent + "  ", v.wheel_right);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DRIVER_BLVD_CONTROLLER_MESSAGE_SPEED_WHEEL_H
