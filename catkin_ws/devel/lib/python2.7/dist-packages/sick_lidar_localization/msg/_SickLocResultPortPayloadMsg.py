# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from sick_lidar_localization/SickLocResultPortPayloadMsg.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SickLocResultPortPayloadMsg(genpy.Message):
  _md5sum = "dda37f4f942d644e9c72988be7984688"
  _type = "sick_lidar_localization/SickLocResultPortPayloadMsg"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# Definition of ros message SickLocResultPortPayloadMsg.
# SickLocResultPortPayloadMsg publishes the payload of a result port telegram
# for sick localization (52 byte). See chapter 5.9 ("About result port telegrams")
# of the operation manual for further details.

uint16 ErrorCode      # ErrorCode 0: OK, ErrorCode 1: UNKNOWNERROR. Size: UInt16 = 2 byte
uint32 ScanCounter    # Counter of related scan data. Size: UInt32 = 4 byte
uint32 Timestamp      # Time stamp of the pose [ms]. The time stamp indicates the time at which the pose is calculated. Size: UInt32 = 4 byte
int32  PoseX          # Position X of the vehicle on the map in cartesian global coordinates [mm]. Size: Int32 = 4 byte
int32  PoseY          # Position Y of the vehicle on the map in cartesian global coordinates [mm]. Size: Int32 = 4 byte
int32  PoseYaw        # Orientation (yaw) of the vehicle on the map [mdeg] Size: Int32 = 4 byte
uint32 Reserved1      # Reserved. Size: UInt32 = 4 byte
int32  Reserved2      # Reserved. Size: Int32 = 4 byte
uint8  Quality        # Quality of pose [0 â€¦ 100], 1 = bad pose quality, 100 = good pose quality. Size: UInt8 = 1 byte
uint8  OutliersRatio  # Ratio of beams that cannot be assigned to the current reference map [%]. Size: UInt8 = 1 byte
int32  CovarianceX    # Covariance c1 of the pose X [mm^2]. Size: Int32 = 4 byte
int32  CovarianceY    # Covariance c5 of the pose Y [mm^2]. Size: Int32 = 4 byte
int32  CovarianceYaw  # Covariance c9 of the pose Yaw [mdeg^2]. Size: Int32 = 4 byte
uint64 Reserved3      # Reserved. Size: UInt64 = 8 byte

"""
  __slots__ = ['ErrorCode','ScanCounter','Timestamp','PoseX','PoseY','PoseYaw','Reserved1','Reserved2','Quality','OutliersRatio','CovarianceX','CovarianceY','CovarianceYaw','Reserved3']
  _slot_types = ['uint16','uint32','uint32','int32','int32','int32','uint32','int32','uint8','uint8','int32','int32','int32','uint64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       ErrorCode,ScanCounter,Timestamp,PoseX,PoseY,PoseYaw,Reserved1,Reserved2,Quality,OutliersRatio,CovarianceX,CovarianceY,CovarianceYaw,Reserved3

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SickLocResultPortPayloadMsg, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.ErrorCode is None:
        self.ErrorCode = 0
      if self.ScanCounter is None:
        self.ScanCounter = 0
      if self.Timestamp is None:
        self.Timestamp = 0
      if self.PoseX is None:
        self.PoseX = 0
      if self.PoseY is None:
        self.PoseY = 0
      if self.PoseYaw is None:
        self.PoseYaw = 0
      if self.Reserved1 is None:
        self.Reserved1 = 0
      if self.Reserved2 is None:
        self.Reserved2 = 0
      if self.Quality is None:
        self.Quality = 0
      if self.OutliersRatio is None:
        self.OutliersRatio = 0
      if self.CovarianceX is None:
        self.CovarianceX = 0
      if self.CovarianceY is None:
        self.CovarianceY = 0
      if self.CovarianceYaw is None:
        self.CovarianceYaw = 0
      if self.Reserved3 is None:
        self.Reserved3 = 0
    else:
      self.ErrorCode = 0
      self.ScanCounter = 0
      self.Timestamp = 0
      self.PoseX = 0
      self.PoseY = 0
      self.PoseYaw = 0
      self.Reserved1 = 0
      self.Reserved2 = 0
      self.Quality = 0
      self.OutliersRatio = 0
      self.CovarianceX = 0
      self.CovarianceY = 0
      self.CovarianceYaw = 0
      self.Reserved3 = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_H2I3iIi2B3iQ().pack(_x.ErrorCode, _x.ScanCounter, _x.Timestamp, _x.PoseX, _x.PoseY, _x.PoseYaw, _x.Reserved1, _x.Reserved2, _x.Quality, _x.OutliersRatio, _x.CovarianceX, _x.CovarianceY, _x.CovarianceYaw, _x.Reserved3))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 52
      (_x.ErrorCode, _x.ScanCounter, _x.Timestamp, _x.PoseX, _x.PoseY, _x.PoseYaw, _x.Reserved1, _x.Reserved2, _x.Quality, _x.OutliersRatio, _x.CovarianceX, _x.CovarianceY, _x.CovarianceYaw, _x.Reserved3,) = _get_struct_H2I3iIi2B3iQ().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_H2I3iIi2B3iQ().pack(_x.ErrorCode, _x.ScanCounter, _x.Timestamp, _x.PoseX, _x.PoseY, _x.PoseYaw, _x.Reserved1, _x.Reserved2, _x.Quality, _x.OutliersRatio, _x.CovarianceX, _x.CovarianceY, _x.CovarianceYaw, _x.Reserved3))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 52
      (_x.ErrorCode, _x.ScanCounter, _x.Timestamp, _x.PoseX, _x.PoseY, _x.PoseYaw, _x.Reserved1, _x.Reserved2, _x.Quality, _x.OutliersRatio, _x.CovarianceX, _x.CovarianceY, _x.CovarianceYaw, _x.Reserved3,) = _get_struct_H2I3iIi2B3iQ().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_H2I3iIi2B3iQ = None
def _get_struct_H2I3iIi2B3iQ():
    global _struct_H2I3iIi2B3iQ
    if _struct_H2I3iIi2B3iQ is None:
        _struct_H2I3iIi2B3iQ = struct.Struct("<H2I3iIi2B3iQ")
    return _struct_H2I3iIi2B3iQ
