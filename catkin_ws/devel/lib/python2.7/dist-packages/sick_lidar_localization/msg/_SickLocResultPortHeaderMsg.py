# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from sick_lidar_localization/SickLocResultPortHeaderMsg.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SickLocResultPortHeaderMsg(genpy.Message):
  _md5sum = "2faf4992147f30886f5a055c14ae68b9"
  _type = "sick_lidar_localization/SickLocResultPortHeaderMsg"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# Definition of ros message SickLocResultPortHeaderMsg.
# SickLocResultPortHeaderMsg publishes the header of a result port telegram
# for sick localization (52 byte). See chapter 5.9 ("About result port telegrams")
# of the operation manual for further details.

uint32  MagicWord        # Magic word SICK (0x53 0x49 0x43 0x4B). Size: 4 × UInt8 = 4 byte
uint32  Length           # Length of telegram incl. header, payload, and trailer. Size: UInt32 = 4 byte
uint16  PayloadType      # Payload type: 0x06c2 = Little Endian, 0x0642 = Big Endian. Size: UInt16 = 2 byte
uint16  PayloadVersion   # Version of PayloadType structure. Size: UInt16 = 2 byte
uint32  OrderNumber      # Order number of the localization controller. Size: UInt32 = 4 byte
uint32  SerialNumber     # Serial number of the localization controller. Size: UInt32 = 4 byte
uint8[] FW_Version       # Software version of the localization controller. Size: 20 × UInt8 = 20 byte
uint32  TelegramCounter  # Telegram counter since last start-up. Size: UInt32 = 4 byte
uint64  SystemTime       # Not used. Size: NTP = 8 byte

"""
  __slots__ = ['MagicWord','Length','PayloadType','PayloadVersion','OrderNumber','SerialNumber','FW_Version','TelegramCounter','SystemTime']
  _slot_types = ['uint32','uint32','uint16','uint16','uint32','uint32','uint8[]','uint32','uint64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       MagicWord,Length,PayloadType,PayloadVersion,OrderNumber,SerialNumber,FW_Version,TelegramCounter,SystemTime

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SickLocResultPortHeaderMsg, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.MagicWord is None:
        self.MagicWord = 0
      if self.Length is None:
        self.Length = 0
      if self.PayloadType is None:
        self.PayloadType = 0
      if self.PayloadVersion is None:
        self.PayloadVersion = 0
      if self.OrderNumber is None:
        self.OrderNumber = 0
      if self.SerialNumber is None:
        self.SerialNumber = 0
      if self.FW_Version is None:
        self.FW_Version = b''
      if self.TelegramCounter is None:
        self.TelegramCounter = 0
      if self.SystemTime is None:
        self.SystemTime = 0
    else:
      self.MagicWord = 0
      self.Length = 0
      self.PayloadType = 0
      self.PayloadVersion = 0
      self.OrderNumber = 0
      self.SerialNumber = 0
      self.FW_Version = b''
      self.TelegramCounter = 0
      self.SystemTime = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2I2H2I().pack(_x.MagicWord, _x.Length, _x.PayloadType, _x.PayloadVersion, _x.OrderNumber, _x.SerialNumber))
      _x = self.FW_Version
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_IQ().pack(_x.TelegramCounter, _x.SystemTime))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 20
      (_x.MagicWord, _x.Length, _x.PayloadType, _x.PayloadVersion, _x.OrderNumber, _x.SerialNumber,) = _get_struct_2I2H2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.FW_Version = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.TelegramCounter, _x.SystemTime,) = _get_struct_IQ().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2I2H2I().pack(_x.MagicWord, _x.Length, _x.PayloadType, _x.PayloadVersion, _x.OrderNumber, _x.SerialNumber))
      _x = self.FW_Version
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_IQ().pack(_x.TelegramCounter, _x.SystemTime))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 20
      (_x.MagicWord, _x.Length, _x.PayloadType, _x.PayloadVersion, _x.OrderNumber, _x.SerialNumber,) = _get_struct_2I2H2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.FW_Version = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.TelegramCounter, _x.SystemTime,) = _get_struct_IQ().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I2H2I = None
def _get_struct_2I2H2I():
    global _struct_2I2H2I
    if _struct_2I2H2I is None:
        _struct_2I2H2I = struct.Struct("<2I2H2I")
    return _struct_2I2H2I
_struct_IQ = None
def _get_struct_IQ():
    global _struct_IQ
    if _struct_IQ is None:
        _struct_IQ = struct.Struct("<IQ")
    return _struct_IQ
