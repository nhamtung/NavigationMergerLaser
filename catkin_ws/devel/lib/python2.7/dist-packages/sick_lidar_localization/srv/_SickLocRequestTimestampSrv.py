# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from sick_lidar_localization/SickLocRequestTimestampSrvRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SickLocRequestTimestampSrvRequest(genpy.Message):
  _md5sum = "d41d8cd98f00b204e9800998ecf8427e"
  _type = "sick_lidar_localization/SickLocRequestTimestampSrvRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# Definition of ROS service SickLocRequestTimestamp for sick localization.
#
# ROS service SickLocRequestTimestamp requests a timestamp from the localization controller
# by sending cola command LocRequestTimestamp ("sMN LocRequestTimestamp").
#
# The service receives and decodes the current timestamp (uint32 timestamp in milliseconds)
# and calculates the time offset with the following formular:
#
# delta_time_ms := mean_time_vehicle_ms - timestamp_lidar_ms
# mean_time_vehicle_ms := (send_time_vehicle + receive_time_vehicle) / 2
#                      := vehicles mean timestamp in milliseconds
# send_time_vehicle    := vehicles timestamp when sending LocRequestTimestamp
# receive_time_vehicle := vehicles timestamp when receiving the LocRequestTimestamp response
# timestamp_lidar_ms   := lidar timestamp in milliseconds from LocRequestTimestamp response
#
# See Operation-Instruction-v1.1.0.241R.pdf for details about time synchronization and
# time offset calculation. See Telegram-Listing-v1.1.0.241R.pdf and Technical_information_Telegram_Listing_NAV_LOC_en_IM0076556.pdf
# for further details about Cola telegram LocRequestTimestamp.

#
# Request (input)
#

"""
  __slots__ = []
  _slot_types = []

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SickLocRequestTimestampSrvRequest, self).__init__(*args, **kwds)

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from sick_lidar_localization/SickLocRequestTimestampSrvResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SickLocRequestTimestampSrvResponse(genpy.Message):
  _md5sum = "ae8b1571bf8be63e0bdad9873d14be2b"
  _type = "sick_lidar_localization/SickLocRequestTimestampSrvResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """
#
# Response (output)
#

uint32 timestamp_lidar_ms        # Lidar timestamp in milliseconds from LocRequestTimestamp response
uint64 mean_time_vehicle_ms      # Vehicle mean timestamp in milliseconds: (send_time_vehicle + receive_time_vehicle) / 2
uint64 delta_time_ms             # Time offset: mean_time_vehicle_ms - timestamp_lidar_ms

uint32 send_time_vehicle_sec     # Vehicle timestamp when sending LocRequestTimestamp (seconds part of ros timestamp immediately before tcp send)
uint32 send_time_vehicle_nsec    # Vehicle timestamp when sending LocRequestTimestamp (nano seconds part of ros timestamp immediately before tcp send)
uint32 receive_time_vehicle_sec  # Vehicle timestamp when receiving the LocRequestTimestamp response (seconds part of ros timestamp immediately after first response byte received)
uint32 receive_time_vehicle_nsec # Vehicle timestamp when receiving the LocRequestTimestamp response (nano seconds part of ros timestamp immediately after first response byte received)

"""
  __slots__ = ['timestamp_lidar_ms','mean_time_vehicle_ms','delta_time_ms','send_time_vehicle_sec','send_time_vehicle_nsec','receive_time_vehicle_sec','receive_time_vehicle_nsec']
  _slot_types = ['uint32','uint64','uint64','uint32','uint32','uint32','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       timestamp_lidar_ms,mean_time_vehicle_ms,delta_time_ms,send_time_vehicle_sec,send_time_vehicle_nsec,receive_time_vehicle_sec,receive_time_vehicle_nsec

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SickLocRequestTimestampSrvResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.timestamp_lidar_ms is None:
        self.timestamp_lidar_ms = 0
      if self.mean_time_vehicle_ms is None:
        self.mean_time_vehicle_ms = 0
      if self.delta_time_ms is None:
        self.delta_time_ms = 0
      if self.send_time_vehicle_sec is None:
        self.send_time_vehicle_sec = 0
      if self.send_time_vehicle_nsec is None:
        self.send_time_vehicle_nsec = 0
      if self.receive_time_vehicle_sec is None:
        self.receive_time_vehicle_sec = 0
      if self.receive_time_vehicle_nsec is None:
        self.receive_time_vehicle_nsec = 0
    else:
      self.timestamp_lidar_ms = 0
      self.mean_time_vehicle_ms = 0
      self.delta_time_ms = 0
      self.send_time_vehicle_sec = 0
      self.send_time_vehicle_nsec = 0
      self.receive_time_vehicle_sec = 0
      self.receive_time_vehicle_nsec = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_I2Q4I().pack(_x.timestamp_lidar_ms, _x.mean_time_vehicle_ms, _x.delta_time_ms, _x.send_time_vehicle_sec, _x.send_time_vehicle_nsec, _x.receive_time_vehicle_sec, _x.receive_time_vehicle_nsec))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 36
      (_x.timestamp_lidar_ms, _x.mean_time_vehicle_ms, _x.delta_time_ms, _x.send_time_vehicle_sec, _x.send_time_vehicle_nsec, _x.receive_time_vehicle_sec, _x.receive_time_vehicle_nsec,) = _get_struct_I2Q4I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_I2Q4I().pack(_x.timestamp_lidar_ms, _x.mean_time_vehicle_ms, _x.delta_time_ms, _x.send_time_vehicle_sec, _x.send_time_vehicle_nsec, _x.receive_time_vehicle_sec, _x.receive_time_vehicle_nsec))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 36
      (_x.timestamp_lidar_ms, _x.mean_time_vehicle_ms, _x.delta_time_ms, _x.send_time_vehicle_sec, _x.send_time_vehicle_nsec, _x.receive_time_vehicle_sec, _x.receive_time_vehicle_nsec,) = _get_struct_I2Q4I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_I2Q4I = None
def _get_struct_I2Q4I():
    global _struct_I2Q4I
    if _struct_I2Q4I is None:
        _struct_I2Q4I = struct.Struct("<I2Q4I")
    return _struct_I2Q4I
class SickLocRequestTimestampSrv(object):
  _type          = 'sick_lidar_localization/SickLocRequestTimestampSrv'
  _md5sum = 'ae8b1571bf8be63e0bdad9873d14be2b'
  _request_class  = SickLocRequestTimestampSrvRequest
  _response_class = SickLocRequestTimestampSrvResponse
