# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from sick_lidar_localization/SickLocTimeSyncSrvRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SickLocTimeSyncSrvRequest(genpy.Message):
  _md5sum = "e3f76cba46368467cfda2028d43e8ed9"
  _type = "sick_lidar_localization/SickLocTimeSyncSrvRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# Definition of ROS service SickLocTimeSync for sick localization.
#
# ROS service SickLocTimeSync returns the system time of a vehicle pose from lidar ticks in ms.
# SickLocTimeSync uses a software pll to calculate the system time from ticks. Therefore at least
# 7 LocRequestTimestamp measurements are required before time sync becomes valid (default fifo
# size of the software pll is 7 measurements). Depending on time_sync_rate configured in the
# launch-file, this initial phase can take several seconds (up to 70 seconds).

#
# Request (input): Timestamp in ticks
#

uint32 timestamp_lidar_ms  # Lidar timestamp in milliseconds from LocRequestTimestamp response

"""
  __slots__ = ['timestamp_lidar_ms']
  _slot_types = ['uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       timestamp_lidar_ms

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SickLocTimeSyncSrvRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.timestamp_lidar_ms is None:
        self.timestamp_lidar_ms = 0
    else:
      self.timestamp_lidar_ms = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.timestamp_lidar_ms
      buff.write(_get_struct_I().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (self.timestamp_lidar_ms,) = _get_struct_I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.timestamp_lidar_ms
      buff.write(_get_struct_I().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (self.timestamp_lidar_ms,) = _get_struct_I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from sick_lidar_localization/SickLocTimeSyncSrvResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SickLocTimeSyncSrvResponse(genpy.Message):
  _md5sum = "cf6450e0c6b2fb33be19dfbfcc6f9815"
  _type = "sick_lidar_localization/SickLocTimeSyncSrvResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """
#
# Response (output): System time calculated by software pll
#

bool   vehicle_time_valid  # true: vehicle_time_sec and vehicle_time_nsec valid, false: software pll still in initial phase
uint32 vehicle_time_sec    # Time of vehicles pose calculated by software pll (seconds part of the system time)
uint32 vehicle_time_nsec   # Time of vehicles pose calculated by software pll (nano seconds part of the system time)

"""
  __slots__ = ['vehicle_time_valid','vehicle_time_sec','vehicle_time_nsec']
  _slot_types = ['bool','uint32','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       vehicle_time_valid,vehicle_time_sec,vehicle_time_nsec

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SickLocTimeSyncSrvResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.vehicle_time_valid is None:
        self.vehicle_time_valid = False
      if self.vehicle_time_sec is None:
        self.vehicle_time_sec = 0
      if self.vehicle_time_nsec is None:
        self.vehicle_time_nsec = 0
    else:
      self.vehicle_time_valid = False
      self.vehicle_time_sec = 0
      self.vehicle_time_nsec = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_B2I().pack(_x.vehicle_time_valid, _x.vehicle_time_sec, _x.vehicle_time_nsec))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 9
      (_x.vehicle_time_valid, _x.vehicle_time_sec, _x.vehicle_time_nsec,) = _get_struct_B2I().unpack(str[start:end])
      self.vehicle_time_valid = bool(self.vehicle_time_valid)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_B2I().pack(_x.vehicle_time_valid, _x.vehicle_time_sec, _x.vehicle_time_nsec))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 9
      (_x.vehicle_time_valid, _x.vehicle_time_sec, _x.vehicle_time_nsec,) = _get_struct_B2I().unpack(str[start:end])
      self.vehicle_time_valid = bool(self.vehicle_time_valid)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B2I = None
def _get_struct_B2I():
    global _struct_B2I
    if _struct_B2I is None:
        _struct_B2I = struct.Struct("<B2I")
    return _struct_B2I
class SickLocTimeSyncSrv(object):
  _type          = 'sick_lidar_localization/SickLocTimeSyncSrv'
  _md5sum = '216ce2f222e12099ae0a51b3bd3cad26'
  _request_class  = SickLocTimeSyncSrvRequest
  _response_class = SickLocTimeSyncSrvResponse
