# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from sick_lidar_localization/SickLocColaTelegramSrvRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SickLocColaTelegramSrvRequest(genpy.Message):
  _md5sum = "568bb3d36a83d508d37ba8ffb718f400"
  _type = "sick_lidar_localization/SickLocColaTelegramSrvRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# Definition of ROS service SickLocColaTelegram for sick localization.
# ROS service SickLocColaTelegram encodes and sends a Cola telegram to the localization controller,
# receives and encodes the answer from the controller.
#
# See Telegram-Listing-v1.1.0.241R.pdf and Technical_information_Telegram_Listing_NAV_LOC_en_IM0076556.pdf
# for further details about Cola telgrams.

#
# Request (input)
#

string  cola_ascii_request       # Cola-ASCII telegram to send to the localization controller, f.e. "sRN SetAccessMode 3 F4724744".
float32 wait_response_timeout    # Timeout for the controller response in secondes. Use 0.0 for Cola requests without controller response.
# bool send_binary               # Not used (true: send binary telegram, false/default: send ASCII telegram)

"""
  __slots__ = ['cola_ascii_request','wait_response_timeout']
  _slot_types = ['string','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       cola_ascii_request,wait_response_timeout

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SickLocColaTelegramSrvRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.cola_ascii_request is None:
        self.cola_ascii_request = ''
      if self.wait_response_timeout is None:
        self.wait_response_timeout = 0.
    else:
      self.cola_ascii_request = ''
      self.wait_response_timeout = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.cola_ascii_request
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.wait_response_timeout
      buff.write(_get_struct_f().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.cola_ascii_request = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.cola_ascii_request = str[start:end]
      start = end
      end += 4
      (self.wait_response_timeout,) = _get_struct_f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.cola_ascii_request
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.wait_response_timeout
      buff.write(_get_struct_f().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.cola_ascii_request = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.cola_ascii_request = str[start:end]
      start = end
      end += 4
      (self.wait_response_timeout,) = _get_struct_f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from sick_lidar_localization/SickLocColaTelegramSrvResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SickLocColaTelegramSrvResponse(genpy.Message):
  _md5sum = "4a966f9c77cc89ffe63caaa088f93373"
  _type = "sick_lidar_localization/SickLocColaTelegramSrvResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """
#
# Response (output)
#

string cola_ascii_response       # Response from the localization controller (empty in case of connection failures, communication errors or timeouts)
uint32 send_timestamp_sec        # Send timestamp (seconds part of ros timestamp immediately before tcp send)
uint32 send_timestamp_nsec       # Send timestamp (nano seconds part of ros timestamp immediately before tcp send)
uint32 receive_timestamp_sec     # Receive timestamp (seconds part of ros timestamp immediately after first response byte received)
uint32 receive_timestamp_nsec    # Receive timestamp (nano seconds part of ros timestamp immediately after first response byte received)

"""
  __slots__ = ['cola_ascii_response','send_timestamp_sec','send_timestamp_nsec','receive_timestamp_sec','receive_timestamp_nsec']
  _slot_types = ['string','uint32','uint32','uint32','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       cola_ascii_response,send_timestamp_sec,send_timestamp_nsec,receive_timestamp_sec,receive_timestamp_nsec

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SickLocColaTelegramSrvResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.cola_ascii_response is None:
        self.cola_ascii_response = ''
      if self.send_timestamp_sec is None:
        self.send_timestamp_sec = 0
      if self.send_timestamp_nsec is None:
        self.send_timestamp_nsec = 0
      if self.receive_timestamp_sec is None:
        self.receive_timestamp_sec = 0
      if self.receive_timestamp_nsec is None:
        self.receive_timestamp_nsec = 0
    else:
      self.cola_ascii_response = ''
      self.send_timestamp_sec = 0
      self.send_timestamp_nsec = 0
      self.receive_timestamp_sec = 0
      self.receive_timestamp_nsec = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.cola_ascii_response
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4I().pack(_x.send_timestamp_sec, _x.send_timestamp_nsec, _x.receive_timestamp_sec, _x.receive_timestamp_nsec))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.cola_ascii_response = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.cola_ascii_response = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.send_timestamp_sec, _x.send_timestamp_nsec, _x.receive_timestamp_sec, _x.receive_timestamp_nsec,) = _get_struct_4I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.cola_ascii_response
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4I().pack(_x.send_timestamp_sec, _x.send_timestamp_nsec, _x.receive_timestamp_sec, _x.receive_timestamp_nsec))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.cola_ascii_response = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.cola_ascii_response = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.send_timestamp_sec, _x.send_timestamp_nsec, _x.receive_timestamp_sec, _x.receive_timestamp_nsec,) = _get_struct_4I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4I = None
def _get_struct_4I():
    global _struct_4I
    if _struct_4I is None:
        _struct_4I = struct.Struct("<4I")
    return _struct_4I
class SickLocColaTelegramSrv(object):
  _type          = 'sick_lidar_localization/SickLocColaTelegramSrv'
  _md5sum = '60dfc3041906873e51cdec40ce270a34'
  _request_class  = SickLocColaTelegramSrvRequest
  _response_class = SickLocColaTelegramSrvResponse
